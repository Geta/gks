name: 'Run Preconfiguration'
inputs:
  file:
    required: false
    description: 'Configuration file path'
    default: '.github/config.yaml'
outputs:
  app_name: 
    value: ${{ steps.app_name.outputs.data }}
  app_dockerfile:
    value: ${{ steps.app_dockerfile.outputs.data }}
  app_packages_url:
    value: ${{ steps.app_packages_url.outputs.data }}
  app_docker_context:
    value: ${{ steps.app_docker_context.outputs.data }}

  harbor_project:
    value: ${{ steps.harbor_project.outputs.data }}
  harbor_proxy_project:
    value: ${{ steps.harbor_proxy_project.outputs.data }}
  harbor_helm_template:
    value: ${{ steps.harbor_helm_template.outputs.data }}
  harbor_domain:
    value: ${{ steps.harbor_domain.outputs.data }}

  git_submodules:
    value: ${{ steps.git_submodules.outputs.data }}

  sonarqube_execute:
    value: ${{ steps.sonarqube_execute.outputs.data }}
  sonarqube_project:
    value: ${{ steps.sonarqube_project.outputs.data }}
  sonarqube_validate:
    value: ${{ steps.sonarqube_validate.outputs.data }}
  sonarqube_platform:
    value: ${{ steps.sonarqube_platform.outputs.data }}
  sonarqube_exclusions:
    value: ${{ steps.sonarqube_exclusions.outputs.data }}
  sonarqube_dotnet:
    value: ${{ steps.sonarqube_dotnet.outputs.data }}
  sonarqube_domain:
    value: ${{ steps.sonarqube_domain.outputs.data }}

  docker_execute:
    value: ${{ steps.docker_execute.outputs.data }}
  docker_severity:
    value: ${{ steps.docker_severity.outputs.data }}
  docker_quality:
    value: ${{ steps.docker_quality.outputs.data }}
runs:
  using: "composite"
  steps:
    -
      name: Install YQ
      uses: Geta/gks/actions/setup-yq@actions/v1

    -
      name: Read application name
      shell: bash
      id: app_name
      run: |
        VALUE=$(./yq e '.app.name' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=app_name::$VALUE
    -
      name: Read Dockerfile path
      shell: bash
      id: app_dockerfile
      run: |
        VALUE=(./yq e '.app.dockerfile' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=app_dockerfile::$VALUE
    -
      name: Read packages url
      shell: bash
      id: app_packages_url
      run: |
        VALUE=$(./yq e '.app.packages_url' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=app_packages_url::$VALUE
    -
      name: Read docker context dir
      shell: bash
      id: app_docker_context
      run: |
        VALUE=$(./yq e '.app.docker_context' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=app_docker_context::$VALUE

    -
      name: Read Harbor project name
      shell: bash
      id: harbor_project
      run: |
        VALUE=$(./yq e '.harbor.project' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=harbor_project::$VALUE
    -
      name: Read Harbor proxy project name
      shell: bash
      id: harbor_proxy_project
      run: |
        VALUE=$(./yq e '.harbor.proxy_project' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=harbor_proxy_project::$VALUE
    -
      name: Read Harbor Helm template version
      shell: bash
      id: harbor_helm_template
      run: |
        VALUE=$(./yq e '.harbor.helm_template' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=harbor_helm_template::$VALUE
    -
      name: Read Harbor domain name
      shell: bash
      id: harbor_domain
      run: |
        VALUE=$(./yq e '.harbor.domain' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=harbor_domain::$VALUE

    -
      name: Read Git sumbodules flag
      shell: bash
      id: git_submodules
      run: |
        VALUE=$(./yq e '.git.submodules' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=git_submodules::$VALUE

    -
      name: Read SonarQube execution flag
      shell: bash
      id: git_submodules
      run: |
        VALUE=$(./yq e '.git.submodules' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=git_submodules::$VALUE

      uses: KJ002/read-yaml@1.5
      shell: bash
      id: sonarqube_execute
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.execute' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_execute::$VALUE
    -
      name: Read SonarQube project name
      shell: bash
      id: sonarqube_project
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.project' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_project::$VALUE
    -
      name: Read SonarQube validation flag
      shell: bash
      id: sonarqube_validate
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.validate' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_validate::$VALUE
    -
      name: Read SonarQube platform
      shell: bash
      id: sonarqube_platform
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.platform' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_platform::$VALUE
    -
      name: Read SonarQube exclusions
      shell: bash
      id: sonarqube_exclusions
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.exclusions' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_exclusions::$VALUE
    -
      name: Read SonarQube dotnet version
      shell: bash
      id: sonarqube_dotnet
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.dotnet_version' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_dotnet::$VALUE
    -
      name: Read SonaQube domain name
      shell: bash
      id: sonarqube_domain
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.domain' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=sonarqube_domain::$VALUE

    -
      name: Read Docker execution flag
      shell: bash
      id: docker_execute
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.execute' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=docker_execute::$VALUE
    -
      name: Read Docker severity
      uses: KJ002/read-yaml@1.5
      shell: bash
      id: docker_severity
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.severity' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=docker_severity::$VALUE
    -
      name: Read Docker dockerfile check flag
      shell: bash
      id: docker_quality
      run: |
        VALUE=$(./yq e '.analysis.sonarqube.dockerfile_check' '${{ inputs.file }}' | sed 's/null//g')
        echo ::set-output name=docker_quality::$VALUE